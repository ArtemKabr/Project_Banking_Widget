"""
main.py ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞ Project_Banking_Widget:
- –∑–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ JSON
- –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç –∏ —Å—á–µ—Ç–æ–≤
- —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
- –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç (USD, EUR ‚Üí RUB)
"""

from src.external_api import convert_to_rub
from src.processing import filter_by_state, sort_by_date
from src.utils import load_operations
from src.widget import (
    get_date,
    get_mask_account,
    get_mask_card_number,
    mask_account_card,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ JSON
operations = load_operations("data/operations.json")
print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(operations)}")

# –í—ã–≤–æ–¥ –ø–µ—Ä–≤–æ–π –Ω–µ–ø—É—Å—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
for op in operations:
    if op:
        print("–ü–µ—Ä–≤–∞—è –Ω–µ–ø—É—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:")
        print(op)
        break

# –¢–µ—Å—Ç—ã –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –∏ —Å—á–µ—Ç–∞
print(get_mask_card_number("7000792289606361"))  # ‚Üí '7000 79** **** 6361'
print(get_mask_account("700079228960636"))  # ‚Üí '**0636'

# –¢–µ—Å—Ç—ã mask_account_card —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –≤—Ö–æ–¥–∞
print(mask_account_card("Maestro 1596837868705199"))
print(mask_account_card("–°—á–µ—Ç 64686473678894779589"))
print(mask_account_card("MasterCard 7158300734726758"))
print(mask_account_card("–°—á–µ—Ç 35383033474447895560"))
print(mask_account_card("Visa Classic 6831982476737658"))
print(mask_account_card("Visa Platinum 8990922113665229"))
print(mask_account_card("Visa Gold 5999414228426353"))
print(mask_account_card("–°—á–µ—Ç 73654108430135874305"))

# –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
print(get_date("2024-03-11T02:26:18.671407"))  # ‚Üí '11.03.2024'

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤ filter_by_state –∏ sort_by_date
data = [
    {"id": 41428829, "state": "EXECUTED", "date": "2019-07-03T18:35:29.512364"},
    {"id": 939719570, "state": "EXECUTED", "date": "2018-06-30T02:08:58.425572"},
    {"id": 594226727, "state": "CANCELED", "date": "2018-09-12T21:27:25.241689"},
    {"id": 615064591, "state": "CANCELED", "date": "2018-10-14T08:21:33.419441"},
]

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É EXECUTED (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
executed = filter_by_state(data)
print("EXECUTED:", executed)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É CANCELED
canceled = filter_by_state(data, state="CANCELED")
print("CANCELED:", canceled)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (—É–±—ã–≤–∞–Ω–∏–µ)
sorted_data = sort_by_date(data)
print("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é:")
for item in sorted_data:
    print(item)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)
sorted_asc = sort_by_date(data, descending=False)
print("\n–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é:")
for item in sorted_asc:
    print(item)

# üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USD/EUR –≤ RUB —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API
print("\nüí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USD/EUR –≤ RUB:")

for tx in operations:
    if not tx:
        continue
    try:
        currency = tx["operationAmount"]["currency"]["code"]
        if currency in {"USD", "EUR"}:
            rub_amount = convert_to_rub(tx)
            print(f"ID {tx['id']}: {tx['operationAmount']['amount']} " f"{currency} = {rub_amount:.2f} RUB")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ID {tx.get('id')}: {e}")
